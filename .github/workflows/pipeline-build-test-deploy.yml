name: CI/CD Pipeline

on:
  push:
    branches:
      - cicd/notification # main
  pull_request:
    branches:
      - cicd/notification # main
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      # This step intentionally fails to simulate a build failure
      - name: Simulate build failure
        run: exit 1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.2' 

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ./.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml', '**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test
      
  deploy:
    if: github.event_name == 'release' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Java to compile Android project
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.2'
      
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ./.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml', '**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
            
      - name: Install dependencies
        run: flutter pub get

      - name: Create the Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > $RUNNER_TEMP/msd-upload.jks

      - name: Build Android app
        run: flutter build appbundle --release

      - name: Sign Android App Bundle
        run: jarsigner -keystore $RUNNER_TEMP/msd-upload.jks -storepass ${{ secrets.STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} -storetype PKCS12 -sigalg SHA256withRSA -digestalg SHA-256 -signedjar build/app/outputs/bundle/release/app-release-signed.aab build/app/outputs/bundle/release/*.aab msd-upload

      - name: Archive Android app
        uses: actions/upload-artifact@v2
        with:
          name: release-aab-signed
          path: build/app/outputs/bundle/release/app-release-signed.aab

  notify_failure:
    name: Notify on Build or Deploy Failure
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure()
    steps:
      - name: Get Committer Username
        id: commit_info
        run: echo "::set-output name=COMMITTER::$(git log -1 --pretty=format:'%an')"
      - name: Send Discord Notification on Failure
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WORKFLOW: ${{ github.workflow }}
          BRANCH: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SERVER_URL: ${{ github.server_url }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          set -e
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"❌❌**Workflow Failed:** $WORKFLOW\n**Branch:** $BRANCH\n**Repository:** $REPOSITORY\n**Link:** $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID\n**Committer:** @$AUTHOR\"} ❌❌" \
          $WEBHOOK_URL || exit 1
    
  notify_success:
    name: Benachrichtigung bei Build-Success
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Get Committer Username
        id: commit_info
        run: echo "::set-output name=COMMITTER::$(git log -1 --pretty=format:'%an')"
      - name: Check if Build and Deploy are Successful
        id: check_success
        run: |
          if [[ "${{ needs.build.result }}" == "success" && ("${{ github.event_name }}" != "release" || "${{ needs.deploy.result }}" == "success" || "${{ needs.deploy.result }}" == "skipped") ]]; then
            echo "success=true" >> $GITHUB_ENV
          else
            echo "success=false" >> $GITHUB_ENV
          fi
  
      - name: Send Discord Notification on Success
        if: env.success == 'true'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WORKFLOW: ${{ github.workflow }}
          BRANCH: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SERVER_URL: ${{ github.server_url }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"✅ **Workflow succeeded:** $WORKFLOW\n**Branch:** $BRANCH\n**Repository:** $REPOSITORY\n**Link:** $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID\n**Committer:** $AUTHOR\"}" \
          $WEBHOOK_URL
          
