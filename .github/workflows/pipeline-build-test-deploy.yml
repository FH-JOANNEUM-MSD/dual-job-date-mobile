name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.2' 

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ./.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml', '**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test
      
  build-android:
    if: github.event_name == 'release'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Java to compile Android project
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.2'
          cache: true
      
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ./.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml', '**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
            
      - name: Install dependencies
        run: flutter pub get

      - name: Create the Android Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > $RUNNER_TEMP/msd-upload.jks

      - name: Build Android app
        run: flutter build appbundle --release

      - name: Sign Android App Bundle
        run: jarsigner -keystore $RUNNER_TEMP/msd-upload.jks -storepass ${{ secrets.STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} -storetype PKCS12 -sigalg SHA256withRSA -digestalg SHA-256 -signedjar build/app/outputs/bundle/release/app-release-signed.aab build/app/outputs/bundle/release/*.aab msd-upload

      - name: Archive Android app
        uses: actions/upload-artifact@v2
        with:
          name: release-aab-signed
          path: build/app/outputs/bundle/release/app-release-signed.aab
  
  build-ios:
    if: github.event_name == 'release'
    needs: test
    runs-on:  macos-latest
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
      - name: 🔐 Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}"
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}"
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: "${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}"
          KEYCHAIN_PASSWORD: "${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}"
          EXPORT_OPTIONS_BASE64: "${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/app/ios/Runner/ExportOptions.plist"

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: ⚙️ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.2"
          channel: 'stable'
          cache: true
        id: flutter
      - name: ⚙️ Setup Melos
        uses: bluefireteam/melos-action@v2
      - name: ⚙️ Install dependencies for all packages
        run: melos build:pub_get:all
      - name: 🍏📦 Create iOS appbundle release
        run: |
          pushd app/
          flutter build ipa \
            --release \
            --target lib/main.dart \
            --export-options-plist=ios/Runner/ExportOptions.plist
          popd
      - name: Archive ios app
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa-signed
          path: ${{ github.workspace }}/app/build/ios/ipa/release-ipa-signed.ipa

  release-android:
    name: Release Android app to internal track
    needs: [build-android,build-ios]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get appbundle from artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-aab-signed
      - name: Release app to internal track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
          packageName: at.fhj.dual_job_date_mobile
          releaseFiles: ${{ github.workspace }}/app-release-signed.aab
          track: alpha
          status: completed

  release-ios:
    name: Release iOS app to internal track
    needs: [build-android, build-ios]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get ipa from artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-ipa-signed
      - name: 🍏🚀 Deploy to App Store (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ github.workspace }}/app/build/ios/ipa/release-ipa-signed.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}


  notify_failure:
    name: Notify on Build or Deploy Failure
    runs-on: ubuntu-latest
    needs: [build-android,build-ios, release-android, release-ios]
    if: failure()
    steps:
      - name: Get Committer Username
        id: commit_info
        run: echo "::set-output name=COMMITTER::$(git log -1 --pretty=format:'%an')"
      - name: Send Discord Notification on Failure
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WORKFLOW: ${{ github.workflow }}
          BRANCH: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SERVER_URL: ${{ github.server_url }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          set -e
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"❌❌ **Workflow Failed:** $WORKFLOW\n**Branch:** $BRANCH\n**Repository:** $REPOSITORY\n**Link:** $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID\n**Committer:** @$AUTHOR\"}" \
          $WEBHOOK_URL || exit 1
    
  notify_success:
    name: Benachrichtigung bei Build-Success
    runs-on: ubuntu-latest
    needs: [build-android,build-ios, release-android, release-ios]
    if: always()
    steps:
      - name: Get Committer Username
        id: commit_info
        run: echo "::set-output name=COMMITTER::$(git log -1 --pretty=format:'%an')"
      - name: Check if Build and Deploy are Successful
        id: check_success
        run: |
          if [[ "${{ needs.build.result }}" == "success" && ("${{ github.event_name }}" != "release" || "${{ needs.deploy.result }}" == "success" || "${{ needs.deploy.result }}" == "skipped") ]]; then
            echo "success=true" >> $GITHUB_ENV
          else
            echo "success=false" >> $GITHUB_ENV
          fi
  
      - name: Send Discord Notification on Success
        if: env.success == 'true'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WORKFLOW: ${{ github.workflow }}
          BRANCH: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SERVER_URL: ${{ github.server_url }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"✅ **Workflow succeeded:** $WORKFLOW\n**Branch:** $BRANCH\n**Repository:** $REPOSITORY\n**Link:** $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID\n**Committer:** $AUTHOR\"}" \
          $WEBHOOK_URL
          
